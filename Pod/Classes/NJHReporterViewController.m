//
//  NJHReporterViewController.m
//  IssueReporter
//
//  Created by Nikolai Johan Heum on 04.05.15.
//  Copyright (c) 2015 Abello. All rights reserved.
//

// View Controllers
#import "NJHReporterViewController.h"

// Model
#import "NJHIssue.h"

// Helpers
#import "NJHGithubAPIClient.h"
#import "NJHImgurAPIClient.h"
#import "NJHReporter.h"

// Categories
#import "UIBarButtonItem+NJH_CustomBarButton.h"
#import "UIColor+NJH_Color.h"

static NSString * const kNJHTableName = @"IssueReporter-Localizable";

static NSString * const kNJHPlaceHolderString = @"What went wrong?";
static NSString * const kNJHTitle =             @"New issue";
static NSString * const kSaveImageName =        @"save";

static int const kNJHDescriptionTextFieldCornerRadius   = 4;
static double const kNJHDescriptionTextFieldBorderWidth = 0.5;

static CGFloat kNJHTextFieldInset = 14;

@interface NJHReporterViewController () <UITextFieldDelegate>

@property (nonatomic, weak) IBOutlet UITextView *descriptionTextField;
@property (nonatomic, weak) IBOutlet UITextField *titleTextField;
@property (nonatomic, weak) IBOutlet UILabel *placeHolderLabel;

@property (nonatomic) NSMutableArray *imagesToUpload;
@property (nonatomic) NSMutableArray *imageURLs;

@property (nonatomic) NJHIssue *issue;
@end

@implementation NJHReporterViewController

+ (instancetype)instanceWithScreenshot:(UIImage *)image {
    NSBundle *resourcesBundle = [NSBundle bundleWithPath:[NSString stringWithFormat:@"%@/IssueReporter.bundle", [NSBundle bundleForClass:self.class].bundlePath]];
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:NSStringFromClass([self class]) bundle:resourcesBundle];
    NJHReporterViewController *reporterViewController = [storyboard instantiateViewControllerWithIdentifier:NSStringFromClass([self class])];
    reporterViewController.autogeneratedImage = image;
    return reporterViewController;
}

- (instancetype)initWithCoder:(NSCoder *)aDecoder {
    if (self = [super initWithCoder:aDecoder]) {
        _imagesToUpload = [NSMutableArray new];
        _issue = [NJHIssue new];
        _imageURLs = [NSMutableArray new];
        self.title = kNJHTitle;
    }
    
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];

    [self configureBlueBar];
    [self configureTextViews];
    [self setupLocalization];
    
    self.navigationItem.leftBarButtonItem = [UIBarButtonItem njh_backButtonWithTarget:self andColor:[UIColor whiteColor] action:@selector(dismissIssueReporter)];
    self.navigationItem.rightBarButtonItem = [UIBarButtonItem njh_saveButtonWithTarget:self action:@selector(saveIssue)];

    [self getChildImageCollectionViewController].delegate = self;
    [[self getChildImageCollectionViewController] didPickImage:self.autogeneratedImage];
}

/**
 *  Adds a spacer on the left side of the top text field and adds a border around the text view
 */
- (void)configureTextViews {
    UIView *spacerView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, kNJHTextFieldInset, kNJHTextFieldInset)];
    self.titleTextField.leftViewMode = UITextFieldViewModeAlways;
    self.titleTextField.leftView = spacerView;
    
    self.descriptionTextField.layer.borderColor = [UIColor njh_greyBorderColor].CGColor;
    self.descriptionTextField.layer.cornerRadius = kNJHDescriptionTextFieldCornerRadius;
    self.descriptionTextField.layer.borderWidth = kNJHDescriptionTextFieldBorderWidth;
    self.descriptionTextField.textContainerInset = UIEdgeInsetsMake(kNJHTextFieldInset, kNJHTextFieldInset, 0, kNJHTextFieldInset);
}

- (void)dismissIssueReporter {
    [self.presentingViewController dismissViewControllerAnimated:YES completion:nil];
}

- (void)configureBlueBar {
    self.navigationController.navigationBar.barTintColor = [UIColor njh_blueNavigationBarColor];
    [self.navigationController.navigationBar setTitleTextAttributes:@{NSForegroundColorAttributeName : [UIColor whiteColor]}];
}

- (void)setupLocalization {
    NSBundle *bundle = [NSBundle bundleForClass:self.class];
    
    self.titleTextField.text = NSLocalizedStringFromTableInBundle(self.titleTextField.text, kNJHTableName, bundle, nil);
    self.placeHolderLabel.text = NSLocalizedStringFromTableInBundle(self.placeHolderLabel.text, kNJHTableName, bundle, nil);
    self.title = NSLocalizedStringFromTableInBundle(self.title, kNJHTableName, bundle, nil);
}

- (void)textViewDidChange:(UITextView *)textView {
    self.placeHolderLabel.hidden = ![textView.text isEqualToString:@""];
}

- (void)userDidPickImageData:(NSData *)imageData {
    [self.imagesToUpload addObject:imageData];
    [self updateRightBarButtonDependingOnImageUploadState];
    
    __weak typeof(self) weakSelf = self;
    [[NJHReporter reporter] uploadImageData:imageData completion:^(NSData *imageData, NSString *url) {
        __strong typeof(self) strongSelf = weakSelf;
        
        [strongSelf.imagesToUpload removeObject:imageData];
        [strongSelf.imageURLs addObject:url];
        
        [strongSelf updateRightBarButtonDependingOnImageUploadState];
    } error:^(NSError *error, NSData *imageData) {
        __strong typeof(self) strongSelf = weakSelf;
        
        NSLog(@"There was an error uploading the image...\n%@", error);
        [strongSelf.imagesToUpload removeObject:imageData];
        [strongSelf updateRightBarButtonDependingOnImageUploadState];
    }];
}

- (void)updateRightBarButtonDependingOnImageUploadState {
    if ([self.imagesToUpload count] == 0) {
        self.navigationItem.rightBarButtonItem = [UIBarButtonItem njh_saveButtonWithTarget:self action:@selector(saveIssue)];
        self.navigationItem.rightBarButtonItem.enabled = YES;
    } else {
        UIActivityIndicatorView *spinner = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
        [spinner startAnimating];
        
        self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:spinner];
        self.navigationItem.rightBarButtonItem.enabled = NO;
    }
}

- (void)saveIssue {
    self.issue.title = self.titleTextField.text;
    self.issue.body = [self generateIssueBody];
    
    __weak typeof(self) weakSelf = self;
    [[NJHGithubAPIClient sharedClient] saveIssue:self.issue success:^(BOOL finish) {
        __strong typeof(self) strongSelf = weakSelf;
        [strongSelf userDidTryToHideKeyboard:nil];
        [strongSelf dismissIssueReporter];
    } error:^(NSError *error) {
        NSLog(@"Error while uploading issue... make sure to check that the API key is correct\n%@", error);
    }];
}

- (NSString *)generateIssueBody {
    NSString *base = [NSString stringWithFormat:@"%@ %@ ", self.descriptionTextField.text, [[NJHReporter reporter] extraInfoForIssue]];
    
    for (NSString *url in self.imageURLs) {
        NSString *image = [NSString stringWithFormat:@"![image](%@)", url];
        base = [base stringByAppendingString:image];
    }
    
    return base;
}

- (IBAction)userDidTryToHideKeyboard:(id)sender {
    [self.view endEditing:false];
}

- (NJHImageCollectionViewController *)getChildImageCollectionViewController {
    NJHImageCollectionViewController *imageCollectionViewController;
    
    for (UIViewController *childViewController in self.childViewControllers) {
        if ([childViewController isKindOfClass:[NJHImageCollectionViewController class]]) {
            imageCollectionViewController = (NJHImageCollectionViewController *)childViewController;
        }
    }
    
    NSAssert(imageCollectionViewController, @"Expected to find image colleciton view controller in child view controllers... did you change the storyboard?");
    return imageCollectionViewController;
}

@end
